

CREATE TABLE actor (
  actor_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_actor PRIMARY KEY (actor_id));

CREATE INDEX idx_actor_last_name ON actor (last_name);

CREATE OR REPLACE TRIGGER actor_timestamp_update_trigger
    BEFORE UPDATE ON actor
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE country (
  country_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  country VARCHAR(50) NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_country PRIMARY KEY  (country_id));

CREATE OR REPLACE TRIGGER country_timestamp_update_trigger
    BEFORE UPDATE ON country
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE city (
  city_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  city VARCHAR(50) NOT NULL,
  country_id SMALLINT NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_city PRIMARY KEY  (city_id),
  CHECK(country_id>0));

CREATE INDEX idx_fk_city_country_id ON city (country_id);

CREATE OR REPLACE TRIGGER city_timestamp_update_trigger
    BEFORE UPDATE ON city
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE address (
  address_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  address VARCHAR(50) NOT NULL,
  address2 VARCHAR(50) DEFAULT NULL,
  district VARCHAR(20) NOT NULL,
  city_id SMALLINT NOT NULL,
  postal_code VARCHAR(10) DEFAULT NULL,
  phone VARCHAR(20) NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_address PRIMARY KEY  (address_id),
  CHECK(city_id>0));

CREATE INDEX idx_fk_address_city_id ON address (city_id);

CREATE OR REPLACE TRIGGER address_timestamp_update_trigger
    BEFORE UPDATE ON address
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE category (
  category_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  name VARCHAR(25) NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_category PRIMARY KEY  (category_id));

CREATE OR REPLACE TRIGGER category_timestamp_update_trigger
    BEFORE UPDATE ON category
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE staff (
  staff_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  address_id SMALLINT NOT NULL,
  picture BLOB DEFAULT NULL,
  email VARCHAR(50) DEFAULT NULL,
  store_id SMALLINT NOT NULL,
  active NUMBER(1,0) DEFAULT 1,
  username VARCHAR(16) NOT NULL,
  password varchar(45) DEFAULT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_staff PRIMARY KEY  (staff_id),
  CHECK(address_id > 0),
  CHECK(store_id > 0));

CREATE INDEX idx_fk_staff_store_id ON staff (store_id);

CREATE INDEX idx_fk_staff_address_id ON staff (address_id);

CREATE OR REPLACE TRIGGER staff_timestamp_update_trigger
    BEFORE UPDATE ON staff
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE store (
  store_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  manager_staff_id SMALLINT NOT NULL,
  address_id SMALLINT NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_store PRIMARY KEY  (store_id),
  CHECK(manager_staff_id > 0),
  CHECK(address_id > 0));

CREATE INDEX idx_fk_store_address_id ON store (address_id);

CREATE  INDEX idx_store_manager_staff_id ON store(manager_staff_id);

CREATE OR REPLACE TRIGGER store_timestamp_update_trigger
    BEFORE UPDATE ON store
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE customer (
  customer_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  store_id SMALLINT NOT NULL,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  email VARCHAR(50) DEFAULT NULL,
  address_id SMALLINT NOT NULL,
  active NUMBER(1,0) DEFAULT 1,
  create_date DATE NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_customer PRIMARY KEY  (customer_id),
  CHECK(address_id > 0),
  CHECK(store_id > 0));

CREATE INDEX idx_fk_customer_store_id ON customer (store_id);

CREATE INDEX idx_fk_customer_address_id ON customer (address_id);

CREATE INDEX idx_fk_customer_last_name ON customer (last_name);

CREATE OR REPLACE TRIGGER customer_timestamp_update_trigger
    BEFORE UPDATE ON customer
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE language (
  language_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  name CHAR(20) NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_language PRIMARY KEY (language_id),
  CHECK(language_id>0));

CREATE OR REPLACE TRIGGER language_timestamp_update_trigger
    BEFORE UPDATE ON language
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE film (
  film_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  title VARCHAR(255) NOT NULL,
  description CLOB DEFAULT NULL,
  release_year NUMBER DEFAULT NULL,
  language_id SMALLINT NOT NULL,
  original_language_id SMALLINT DEFAULT NULL,
  rental_duration SMALLINT DEFAULT 3 NOT NULL,
  rental_rate DECIMAL(4,2) DEFAULT 4.99 NOT NULL,
  length SMALLINT DEFAULT NULL,
  replacement_cost DECIMAL(5,2) DEFAULT 19.99 NOT NULL,
  rating VARCHAR(10) DEFAULT 'G',
  special_features VARCHAR(64) DEFAULT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_film PRIMARY KEY  (film_id),
  CHECK(rating IN ('G','PG','PG-13','R','NC-17')),
  CHECK(language_id > 0),
  CHECK(original_language_id > 0),
  CHECK(rental_duration > 0),
  CHECK(length > 0));

CREATE INDEX idx_fk_film_title ON film (title);

CREATE INDEX idx_fk_film_language_id ON film (language_id);

CREATE INDEX idx_fk_film_original_language_id ON film (original_language_id);

CREATE OR REPLACE TRIGGER film_timestamp_update_trigger
    BEFORE UPDATE ON film
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE film_actor (
  actor_id SMALLINT NOT NULL,
  film_id SMALLINT NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_film_actor PRIMARY KEY  (actor_id,film_id),
  CHECK(actor_id > 0),
  CHECK(film_id > 0));

CREATE INDEX idx_fk_film_actor_film ON film_actor (film_id);

CREATE OR REPLACE TRIGGER film_actor_timestamp_update_trigger
    BEFORE UPDATE ON film_actor
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE film_category (
  film_id SMALLINT NOT NULL,
  category_id SMALLINT NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_film_category PRIMARY KEY (film_id, category_id),
  CHECK(film_id > 0),
  CHECK(category_id > 0));

CREATE OR REPLACE TRIGGER film_category_timestamp_update_trigger
    BEFORE UPDATE ON film_category
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE film_text (
  film_id SMALLINT NOT NULL,
  title VARCHAR(255) NOT NULL,
  description CLOB,
  CONSTRAINT pk_film_text PRIMARY KEY  (film_id));

CREATE TABLE inventory (
  inventory_id  NUMBER(7,0) GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  film_id SMALLINT NOT NULL,
  store_id SMALLINT NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_inventory PRIMARY KEY  (inventory_id),
  CHECK(film_id > 0),
  CHECK(store_id > 0));

CREATE INDEX idx_fk_inventory_film_id ON inventory (film_id);

CREATE INDEX idx_fk_inventory_store_id_film_id ON inventory (store_id,film_id);

CREATE OR REPLACE TRIGGER inventory_timestamp_update_trigger
    BEFORE UPDATE ON inventory
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE rental (
  rental_id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  rental_date DATE NOT NULL,
  inventory_id NUMBER(7,0) NOT NULL,
  customer_id SMALLINT NOT NULL,
  return_date DATE DEFAULT NULL,
  staff_id SMALLINT NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_rental PRIMARY KEY (rental_id),
  CHECK(inventory_id > 0),
  CHECK(customer_id > 0),
  CHECK(staff_id > 0));

CREATE UNIQUE INDEX idx_rental_date_inventory_customer ON rental (rental_date,inventory_id,customer_id);

CREATE INDEX idx_fk_rental_inventory_id ON rental (inventory_id);

CREATE INDEX idx_fk_rental_customer_id ON rental (customer_id);

CREATE INDEX idx_fk_rental_staff_id ON rental (staff_id);

CREATE OR REPLACE TRIGGER rental_timestamp_update_trigger
    BEFORE UPDATE ON rental
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

CREATE TABLE payment (
  payment_id SMALLINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  customer_id SMALLINT NOT NULL,
  staff_id SMALLINT NOT NULL,
  rental_id INT DEFAULT NULL,
  amount DECIMAL(5,2) NOT NULL,
  payment_date DATE NOT NULL,
  last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT pk_payment PRIMARY KEY  (payment_id),
  CHECK(customer_id > 0),
  CHECK(staff_id > 0));

CREATE INDEX idx_fk_payment_staff_id ON payment (staff_id);

CREATE INDEX idx_fk_payment_customer_id ON payment (customer_id);

CREATE OR REPLACE TRIGGER payment_timestamp_update_trigger
    BEFORE UPDATE ON payment
    FOR EACH ROW
    BEGIN
        :new.last_update := current_timestamp;
    END;
/

